
# line 2 "parse.y"
#include <stdio.h>
#include <ctype.h>
#include <X11/Intrinsic.h>
#include <Xm/Xm.h>
#ifdef VMS
#include "../util/VMSparam.h"
#else
#include <sys/param.h>
#endif /*VMS*/
#include "textBuf.h"
#include "nedit.h"
#include "interpret.h"
#include "parse.h"

/* Macros to add error processing to AddOp and AddSym calls */
#define ADD_OP(op) if (!AddOp(op, &ErrMsg)) return 1
#define ADD_SYM(sym) if (!AddSym(sym, &ErrMsg)) return 1
#define ADD_IMMED(val) if (!AddImmediate(val, &ErrMsg)) return 1
#define ADD_BR_OFF(to) if (!AddBranchOffset(to, &ErrMsg)) return 1
#define SET_BR_OFF(from, to) *((int *)from) = to - from

/* Max. length for a string constant (... there shouldn't be a maximum) */
#define MAX_STRING_CONST_LEN 5000

static const char CVSID[] = "$Id: parse.c_noyacc,v 1.4 2001/02/26 23:38:03 edg Exp $";
static int yylex(void);
static int follow(char expect, int yes, int no);
static int follow2(char expect1, int yes1, char expect2, int yes2, int no);
static Symbol *matchesActionRoutine(char **inPtr);

static char *ErrMsg;
static char *InPtr;


# line 36 "parse.y"
typedef union
#ifdef __cplusplus
	YYSTYPE
#endif
 {
    Symbol *sym;
    Inst *inst;
    int nArgs;
} YYSTYPE;
# define NUMBER 257
# define STRING 258
# define SYMBOL 259
# define IF 260
# define WHILE 261
# define ELSE 262
# define FOR 263
# define BREAK 264
# define CONTINUE 265
# define RETURN 266
# define ADDEQ 267
# define SUBEQ 268
# define MULEQ 269
# define DIVEQ 270
# define MODEQ 271
# define ANDEQ 272
# define OREQ 273
# define CONCAT 274
# define OR 275
# define AND 276
# define GT 277
# define GE 278
# define LT 279
# define LE 280
# define EQ 281
# define NE 282
# define UNARY_MINUS 283
# define NOT 284
# define INCR 285
# define DECR 286
# define POW 287

#ifdef __STDC__
#include <stdlib.h>
#include <string.h>
#else
#include <malloc.h>
#include <memory.h>
#endif

#include <values.h>

#ifdef __cplusplus

#ifndef yyerror
	void yyerror(const char *);
#endif

#ifndef yylex
#ifdef __EXTERN_C__
	extern "C" { int yylex(void); }
#else
	int yylex(void);
#endif
#endif
	int yyparse(void);

#endif
#define yyclearin yychar = -1
#define yyerrok yyerrflag = 0
extern int yychar;
extern int yyerrflag;
YYSTYPE yylval;
YYSTYPE yyval;
typedef int yytabelem;
#ifndef YYMAXDEPTH
#define YYMAXDEPTH 150
#endif
#if YYMAXDEPTH > 0
int yy_yys[YYMAXDEPTH], *yys = yy_yys;
YYSTYPE yy_yyv[YYMAXDEPTH], *yyv = yy_yyv;
#else	/* user does initial allocation */
int *yys;
YYSTYPE *yyv;
#endif
static int yymaxdepth = YYMAXDEPTH;
# define YYERRCODE 256

# line 176 "parse.y"
 /* User Subroutines Section */

/*
** Parse a null terminated string and create a program from it (this is the
** parser entry point).  The program created by this routine can be
** executed using ExecuteProgram.  Returns program on success, or NULL
** on failure.  If the command failed, the error message is returned
** as a pointer to a static string in msg, and the length of the string up
** to where parsing failed in stoppedAt.
*/
Program *ParseMacro(char *expr, char **msg, char **stoppedAt)
{
    Program *prog;
    
    BeginCreatingProgram();
    
    /* call yyparse to parse the string and check for success.  If the parse
       failed, return the error message and string index (the grammar aborts
       parsing at the first error) */
    InPtr = expr;
    if (yyparse()) {
    	*msg = ErrMsg;
    	*stoppedAt = InPtr;
    	FreeProgram(FinishCreatingProgram());
    	return NULL;
    }
    
    /* get the newly created program */
    prog = FinishCreatingProgram();
    
    /* parse succeeded */
    *msg = "";
    *stoppedAt = InPtr;
    return prog;
}

static int yylex(void)
{
    int i, len;
    Symbol *s;
    static int stringConstIndex = 0;
    static DataValue value = {0, {0}};
    static char escape[] = "\\\"ntbrfav";
    static char replace[] = "\\\"\n\t\b\r\f\a\v";
    
    /* skip whitespace and backslash-newline combinations which are
       also considered whitespace */
    for (;;) {
    	if (*InPtr == '\\' && *(InPtr + 1) == '\n')
    	    InPtr += 2;
    	else if (*InPtr == ' ' || *InPtr == '\t')
    	    InPtr++;
    	else
    	    break;
    }
    
    /* skip comments */
    if (*InPtr == '#')
    	while (*InPtr != '\n' && *InPtr != '\0') InPtr++;
    
    /* return end of input at the end of the string */
    if (*InPtr == '\0') {
	return 0;
    }
    
    /* process number tokens */
    if (isdigit(*InPtr))  { /* number */
        char name[28];
        sscanf(InPtr, "%d%n", &value.val.n, &len);
        sprintf(name, "const %d", value.val.n);
        InPtr += len;
        value.tag = INT_TAG;
        if ((yylval.sym=LookupSymbol(name)) == NULL)
            yylval.sym = InstallSymbol(name, CONST_SYM, value);
        return NUMBER;
    }
    
    /* process symbol tokens.  "define" is a special case not handled
       by this parser, considered end of input.  Another special case
       is action routine names which are allowed to contain '-' despite
       the ambiguity, handled in matchesActionRoutine. */
    if (isalpha(*InPtr) || *InPtr == '$') {
        if ((s=matchesActionRoutine(&InPtr)) == NULL) {
            char symName[MAX_SYM_LEN+1], *p = symName;
            *p++ = *InPtr++;
            while (isalnum(*InPtr) || *InPtr=='_') {
		if (p >= symName + MAX_SYM_LEN)
		    InPtr++;
		else
		    *p++ = *InPtr++;
	    }
	    *p = '\0';
	    if (!strcmp(symName, "while")) return WHILE;
	    if (!strcmp(symName, "if")) return IF;
	    if (!strcmp(symName, "else")) return ELSE;
	    if (!strcmp(symName, "for")) return FOR;
	    if (!strcmp(symName, "break")) return BREAK;
	    if (!strcmp(symName, "continue")) return CONTINUE;
	    if (!strcmp(symName, "return")) return RETURN;
	    if (!strcmp(symName, "define")) {
	    	InPtr -= 6;
	    	return 0;
	    }
	    if ((s=LookupSymbol(symName)) == NULL) {
        	s = InstallSymbol(symName, symName[0]=='$' ? (isdigit(symName[1]) ?
            		ARG_SYM : GLOBAL_SYM) : LOCAL_SYM, value);
            	s->value.tag = NO_TAG;
            }
	}
	yylval.sym = s;
        return SYMBOL;
    }
    
    /* process quoted strings w/ embedded escape sequences */
    if (*InPtr == '\"') {
        char string[MAX_STRING_CONST_LEN], *p = string;
        char stringName[25];
        InPtr++;
        while (*InPtr != '\0' && *InPtr != '\"' && *InPtr != '\n') {
	    if (p >= string + MAX_STRING_CONST_LEN) {
	    	InPtr++;
	    	continue;
	    }
	    if (*InPtr == '\\') {
		InPtr++;
		if (*InPtr == '\n') {
		    InPtr++;
		    continue;
		}
		for (i=0; escape[i]!='\0'; i++) {
		    if (escape[i] == '\0') {
		    	*p++= *InPtr++;
		    	break;
		    } else if (escape[i] == *InPtr) {
		    	*p++ = replace[i];
		    	InPtr++;
		    	break;
		    }
		}
	    } else
		*p++= *InPtr++;
	}
	*p = '\0';
	InPtr++;
	if ((yylval.sym = LookupStringConstSymbol(string)) == NULL) {
		value.val.str = AllocString(p-string+1);
		strcpy(value.val.str, string);
		value.tag = STRING_TAG;
		sprintf(stringName, "string #%d", stringConstIndex++);
		yylval.sym = InstallSymbol(stringName, CONST_SYM, value);
	}
    return STRING;
    }
    
    /* process remaining two character tokens or return single char as token */
    switch(*InPtr++) {
    case '>':	return follow('=', GE, GT);
    case '<':	return follow('=', LE, LT);
    case '=':	return follow('=', EQ, '=');
    case '!':	return follow('=', NE, NOT);
    case '+':	return follow2('+', INCR, '=', ADDEQ, '+');
    case '-':	return follow2('-', DECR, '=', SUBEQ, '-');
    case '|':	return follow2('|', OR, '=', OREQ, '|');
    case '&':	return follow2('&', AND, '=', ANDEQ, '&');
    case '*':	return follow2('*', POW, '=', MULEQ, '*');
    case '/':   return follow('=', DIVEQ, '/');
    case '%':	return follow('=', MODEQ, '%');
    case '^':	return POW;
    default:	return *(InPtr-1);
    }
}

/*
** look ahead for >=, etc.
*/
static int follow(char expect, int yes, int no)
{
    if (*InPtr++ == expect)
	return yes;
    InPtr--;
    return no;
}
static int follow2(char expect1, int yes1, char expect2, int yes2, int no)
{
    char next = *InPtr++;
    if (next == expect1)
	return yes1;
    if (next == expect2)
    	return yes2;
    InPtr--;
    return no;
}

/*
** Look (way) ahead for hyphenated routine names which begin at inPtr.  A
** hyphenated name is allowed if it is pre-defined in the global symbol
** table.  If a matching name exists, returns the symbol, and update "inPtr".
**
** I know this is horrible language design, but existing nedit action routine
** names contain hyphens.  Handling them here in the lexical analysis process
** is much easier than trying to deal with it in the parser itself.  (sorry)
*/
static Symbol *matchesActionRoutine(char **inPtr)
{
    char *c, *symPtr;
    int hasDash = False;
    char symbolName[MAX_SYM_LEN+1];
    Symbol *s;
    
    symPtr = symbolName;
    for (c = *inPtr; isalnum(*c) || *c=='_' || (*c=='-'&&isalnum(*(c+1))); c++){
    	if (*c == '-')
    	    hasDash = True;
    	*symPtr++ = *c;
    }
    if (!hasDash)
    	return NULL;
    *symPtr = '\0';
    s = LookupSymbol(symbolName);
    if (s != NULL)
    	*inPtr = c;
    return s;
}

/*
** Called by yacc to report errors (just stores for returning when
** parsing is aborted.  The error token action is to immediate abort
** parsing, so this message is immediately reported to the caller
** of ParseExpr)
*/
int yyerror(char *s)
{
    ErrMsg = s;
    return 0;
}
yytabelem yyexca[] ={
-1, 0,
	259, 74,
	260, 74,
	261, 74,
	263, 74,
	264, 74,
	265, 74,
	266, 74,
	285, 74,
	286, 74,
	123, 74,
	10, 74,
	-2, 0,
-1, 1,
	0, -1,
	-2, 0,
	};
# define YYNPROD 76
# define YYLAST 538
yytabelem yyact[]={

    70,    78,    35,    71,   125,    68,    66,    36,    67,   147,
    69,    15,    70,    70,    78,   140,    91,    68,    68,    66,
   102,    67,    69,    69,    70,    78,    84,    90,    52,    68,
    66,    51,    67,     6,    69,    70,     3,    17,    18,    59,
    68,    66,     6,    67,     4,    69,   134,    15,     9,    19,
     6,    20,    12,    13,    14,     8,    44,    45,    46,    47,
    48,    49,    50,    63,   138,    56,    30,    53,    93,   106,
   104,    70,   145,    17,    18,   106,    68,    66,     6,    67,
   136,    69,    60,     7,   105,    21,   132,    79,     2,   127,
    41,    58,   126,    35,    22,   127,    35,    26,    36,   103,
    79,    36,    25,     7,    24,     6,    28,    27,    23,    11,
     1,    40,    55,    16,    81,    80,    61,    62,   139,    65,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    21,     0,     0,     0,     0,     0,
     0,     0,     0,    15,     9,    19,   135,    20,    12,    13,
    14,     0,   107,   124,    15,     9,    19,    54,    20,    12,
    13,    14,   131,     5,     0,     0,     0,     0,     0,    17,
    18,   130,     0,     0,     0,     0,   137,     0,   142,     0,
    17,    18,     0,     0,     0,     0,   144,     0,     0,     0,
   146,     0,   128,   129,    60,   150,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    32,
    33,    34,     7,     0,   141,    21,     0,     0,   143,     0,
     0,     0,     0,     0,   148,     0,   149,     0,    83,    82,
    72,    73,    74,    75,    76,    77,    37,    38,    39,     0,
    71,    83,    82,    72,    73,    74,    75,    76,    77,     0,
     0,     0,    71,    71,    72,    73,    74,    75,    76,    77,
     0,    85,    86,     0,    71,    72,    73,    74,    75,    76,
    77,     0,    15,     9,    19,    71,    20,    12,    13,    14,
     0,    15,     9,    19,     0,    20,    12,    13,    14,    15,
     9,    19,     0,    20,    12,    13,    14,     0,    17,    18,
    32,    33,    34,    32,    33,    34,     0,    17,    18,    31,
     0,    71,     0,     0,     0,    17,    18,    15,     9,    19,
     0,    20,    12,    13,    14,    42,    43,    37,    38,    39,
    37,    38,    39,     0,    57,    57,     0,     0,     0,    64,
     0,     0,     0,    17,    18,    87,    88,    89,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,     0,     0,     0,     0,     0,     0,     0,    94,
     0,     0,    64,     0,    64,    64,    64,    64,    64,    64,
    64,    64,     0,     0,    29,    57,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    92,     0,     0,    64,    95,    96,    97,    98,    99,   100,
   101,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   133 };
yytabelem yypact[]={

  -220,-10000000,    40,-10000000,  -212,-10000000,-10000000,-10000000,    98,    64,
    62,    57,    97,    96,    56,    50,  -211,  -228,  -231,-10000000,
-10000000,-10000000,    32,-10000000,   -38,   -38,  -248,-10000000,-10000000,    53,
-10000000,   -24,-10000000,-10000000,   -14,   -38,   -38,   -38,  -232,  -243,
   -38,   -38,-10000000,-10000000,   -38,   -38,   -38,   -38,   -38,   -38,
   -38,-10000000,-10000000,  -105,-10000000,    95,    58,   -24,    29,    25,
-10000000,    95,    95,-10000000,   -24,    95,   -38,   -38,   -38,   -38,
   -38,   -38,   -38,   -38,   -38,   -38,   -38,   -38,   -38,   -38,
   -38,   -38,-10000000,-10000000,   -38,-10000000,-10000000,   -37,  -284,  -284,
-10000000,-10000000,   -38,    51,   -38,   -38,   -38,   -38,   -38,   -38,
   -38,   -38,-10000000,-10000000,-10000000,   -38,  -248,    95,   -25,   -25,
  -284,  -284,  -284,  -284,    34,    34,    34,    34,    34,    34,
    -2,   -13,   -24,   -24,    45,-10000000,-10000000,   -38,    23,    23,
     5,-10000000,-10000000,   -38,  -247,-10000000,-10000000,-10000000,  -248,-10000000,
-10000000,    68,    31,    23,  -116,-10000000,-10000000,-10000000,    23,    95,
-10000000 };
yytabelem yypgo[]={

     0,    68,    65,    39,   120,   118,   115,   114,   113,   110,
    88,    44,    46,    80,    55,   109,   409,   319 };
yytabelem yyr1[]={

     0,     9,     9,     9,     9,    12,    12,    11,    11,    13,
    13,    13,    13,    13,    13,    13,    13,    13,    14,    14,
    14,    14,    14,    14,    14,    14,    14,    14,    14,    14,
    14,     8,     3,     3,     3,     1,     1,     1,    16,    16,
    17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
    17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
    17,    17,    17,    17,    17,    17,    17,     4,    15,     5,
     2,     2,     6,     7,    10,    10 };
yytabelem yyr2[]={

     0,     5,    11,     9,     3,    10,     2,     2,     4,     6,
    13,    19,    13,    21,     7,     7,     9,     7,     7,     7,
     7,     7,     7,     7,     7,     7,     9,     5,     5,     5,
     5,     3,     1,     3,     7,     1,     3,     7,     2,     5,
     3,     3,     3,     9,     6,     7,     7,     7,     7,     7,
     7,     5,     7,     7,     7,     7,     7,     7,     7,     7,
     7,     7,     5,     5,     5,     5,     5,     3,     3,     3,
     1,     3,     3,     3,     0,     4 };
yytabelem yychk[]={

-10000000,    -9,   -10,   256,   -11,   123,    10,   -13,   -14,   260,
    -4,   -15,   264,   265,   266,   259,    -8,   285,   286,   261,
   263,   -13,   -10,    10,    40,    40,    40,    10,    10,   -16,
    10,   -17,   257,   258,   259,    40,    45,   284,   285,   286,
    61,    40,   285,   286,   267,   268,   269,   270,   271,   272,
   273,   259,   259,   -11,   125,   -10,    -2,   -17,    -2,    -3,
   -14,   -10,   -10,    10,   -17,   -10,    43,    45,    42,    47,
    37,   287,   277,   278,   279,   280,   281,   282,    38,   124,
    -6,    -7,   276,   275,    40,   285,   286,   -17,   -17,   -17,
   259,   259,   -16,    -1,   -16,   -16,   -16,   -16,   -16,   -16,
   -16,   -16,   125,    41,    41,    59,    44,   -10,   -17,   -17,
   -17,   -17,   -17,   -17,   -17,   -17,   -17,   -17,   -17,   -17,
   -17,   -17,   -17,   -17,    -1,    41,    41,    44,   -10,   -10,
    -2,   -14,    41,   -16,   -12,   123,   -13,   -12,    59,    -5,
   262,   -10,    -3,   -10,   -11,    41,   -12,   125,   -10,   -10,
   -12 };
yytabelem yydef[]={

    -2,    -2,     0,     4,     1,    74,    75,     7,     0,     0,
     0,     0,     0,     0,     0,    31,     0,     0,     0,    67,
    68,     8,     0,    74,    70,    70,    32,    74,    74,     0,
    74,    38,    40,    41,    42,     0,     0,     0,     0,     0,
     0,    35,    28,    30,     0,     0,     0,     0,     0,     0,
     0,    27,    29,     0,     3,     9,     0,    71,     0,     0,
    33,    14,    15,    74,    39,    17,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    72,    73,    35,    64,    66,     0,    51,    62,
    63,    65,    18,     0,    36,    19,    20,    21,    22,    23,
    24,    25,     2,    74,    74,    70,     0,    16,    45,    46,
    47,    48,    49,    50,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,     0,    44,    26,     0,     0,     0,
     0,    34,    43,    37,    10,    74,     6,    12,    32,    74,
    69,     0,     0,     0,     0,    74,    11,    74,     0,     5,
    13 };
typedef struct
#ifdef __cplusplus
	yytoktype
#endif
{ char *t_name; int t_val; } yytoktype;
#ifndef YYDEBUG
#	define YYDEBUG	0	/* don't allow debugging */
#endif

#if YYDEBUG

yytoktype yytoks[] =
{
	"NUMBER",	257,
	"STRING",	258,
	"SYMBOL",	259,
	"IF",	260,
	"WHILE",	261,
	"ELSE",	262,
	"FOR",	263,
	"BREAK",	264,
	"CONTINUE",	265,
	"RETURN",	266,
	"=",	61,
	"ADDEQ",	267,
	"SUBEQ",	268,
	"MULEQ",	269,
	"DIVEQ",	270,
	"MODEQ",	271,
	"ANDEQ",	272,
	"OREQ",	273,
	"CONCAT",	274,
	"OR",	275,
	"AND",	276,
	"|",	124,
	"&",	38,
	"GT",	277,
	"GE",	278,
	"LT",	279,
	"LE",	280,
	"EQ",	281,
	"NE",	282,
	"+",	43,
	"-",	45,
	"*",	42,
	"/",	47,
	"%",	37,
	"UNARY_MINUS",	283,
	"NOT",	284,
	"INCR",	285,
	"DECR",	286,
	"POW",	287,
	"-unknown-",	-1	/* ends search */
};

char * yyreds[] =
{
	"-no such reduction-",
	"program : blank stmts",
	"program : blank '{' blank stmts '}'",
	"program : blank '{' blank '}'",
	"program : error",
	"block : '{' blank stmts '}' blank",
	"block : stmt",
	"stmts : stmt",
	"stmts : stmts stmt",
	"stmt : simpstmt '\n' blank",
	"stmt : IF '(' cond ')' blank block",
	"stmt : IF '(' cond ')' blank block else blank block",
	"stmt : while '(' cond ')' blank block",
	"stmt : for '(' comastmts ';' cond ';' comastmts ')' blank block",
	"stmt : BREAK '\n' blank",
	"stmt : CONTINUE '\n' blank",
	"stmt : RETURN expr '\n' blank",
	"stmt : RETURN '\n' blank",
	"simpstmt : SYMBOL '=' expr",
	"simpstmt : evalsym ADDEQ expr",
	"simpstmt : evalsym SUBEQ expr",
	"simpstmt : evalsym MULEQ expr",
	"simpstmt : evalsym DIVEQ expr",
	"simpstmt : evalsym MODEQ expr",
	"simpstmt : evalsym ANDEQ expr",
	"simpstmt : evalsym OREQ expr",
	"simpstmt : SYMBOL '(' arglist ')'",
	"simpstmt : INCR SYMBOL",
	"simpstmt : SYMBOL INCR",
	"simpstmt : DECR SYMBOL",
	"simpstmt : SYMBOL DECR",
	"evalsym : SYMBOL",
	"comastmts : /* empty */",
	"comastmts : simpstmt",
	"comastmts : comastmts ',' simpstmt",
	"arglist : /* empty */",
	"arglist : expr",
	"arglist : arglist ',' expr",
	"expr : numexpr",
	"expr : expr numexpr",
	"numexpr : NUMBER",
	"numexpr : STRING",
	"numexpr : SYMBOL",
	"numexpr : SYMBOL '(' arglist ')'",
	"numexpr : '(' numexpr ')'",
	"numexpr : numexpr '+' numexpr",
	"numexpr : numexpr '-' numexpr",
	"numexpr : numexpr '*' numexpr",
	"numexpr : numexpr '/' numexpr",
	"numexpr : numexpr '%' numexpr",
	"numexpr : numexpr POW numexpr",
	"numexpr : '-' numexpr",
	"numexpr : numexpr GT numexpr",
	"numexpr : numexpr GE numexpr",
	"numexpr : numexpr LT numexpr",
	"numexpr : numexpr LE numexpr",
	"numexpr : numexpr EQ numexpr",
	"numexpr : numexpr NE numexpr",
	"numexpr : numexpr '&' numexpr",
	"numexpr : numexpr '|' numexpr",
	"numexpr : numexpr and numexpr",
	"numexpr : numexpr or numexpr",
	"numexpr : NOT numexpr",
	"numexpr : INCR SYMBOL",
	"numexpr : SYMBOL INCR",
	"numexpr : DECR SYMBOL",
	"numexpr : SYMBOL DECR",
	"while : WHILE",
	"for : FOR",
	"else : ELSE",
	"cond : /* empty */",
	"cond : numexpr",
	"and : AND",
	"or : OR",
	"blank : /* empty */",
	"blank : blank '\n'",
};
#endif /* YYDEBUG */
# line	1 "/usr/ccs/bin/yaccpar"
/*
 * Copyright (c) 1993 by Sun Microsystems, Inc.
 */

#pragma ident	"@(#)yaccpar	6.12	93/06/07 SMI"

/*
** Skeleton parser driver for yacc output
*/

/*
** yacc user known macros and defines
*/
#define YYERROR		goto yyerrlab
#define YYACCEPT	return(0)
#define YYABORT		return(1)
#define YYBACKUP( newtoken, newvalue )\
{\
	if ( yychar >= 0 || ( yyr2[ yytmp ] >> 1 ) != 1 )\
	{\
		yyerror( "syntax error - cannot backup" );\
		goto yyerrlab;\
	}\
	yychar = newtoken;\
	yystate = *yyps;\
	yylval = newvalue;\
	goto yynewstate;\
}
#define YYRECOVERING()	(!!yyerrflag)
#define YYNEW(type)	malloc(sizeof(type) * yynewmax)
#define YYCOPY(to, from, type) \
	(type *) memcpy(to, (char *) from, yynewmax * sizeof(type))
#define YYENLARGE( from, type) \
	(type *) realloc((char *) from, yynewmax * sizeof(type))
#ifndef YYDEBUG
#	define YYDEBUG	1	/* make debugging available */
#endif

/*
** user known globals
*/
int yydebug;			/* set to 1 to get debugging */

/*
** driver internal defines
*/
#define YYFLAG		(-10000000)

/*
** global variables used by the parser
*/
YYSTYPE *yypv;			/* top of value stack */
int *yyps;			/* top of state stack */

int yystate;			/* current state */
int yytmp;			/* extra var (lasts between blocks) */

int yynerrs;			/* number of errors */
int yyerrflag;			/* error recovery flag */
int yychar;			/* current input token number */



#ifdef YYNMBCHARS
#define YYLEX()		yycvtok(yylex())
/*
** yycvtok - return a token if i is a wchar_t value that exceeds 255.
**	If i<255, i itself is the token.  If i>255 but the neither 
**	of the 30th or 31st bit is on, i is already a token.
*/
#if defined(__STDC__) || defined(__cplusplus)
int yycvtok(int i)
#else
int yycvtok(i) int i;
#endif
{
	int first = 0;
	int last = YYNMBCHARS - 1;
	int mid;
	wchar_t j;

	if(i&0x60000000){/*Must convert to a token. */
		if( yymbchars[last].character < i ){
			return i;/*Giving up*/
		}
		while ((last>=first)&&(first>=0)) {/*Binary search loop*/
			mid = (first+last)/2;
			j = yymbchars[mid].character;
			if( j==i ){/*Found*/ 
				return yymbchars[mid].tvalue;
			}else if( j<i ){
				first = mid + 1;
			}else{
				last = mid -1;
			}
		}
		/*No entry in the table.*/
		return i;/* Giving up.*/
	}else{/* i is already a token. */
		return i;
	}
}
#else/*!YYNMBCHARS*/
#define YYLEX()		yylex()
#endif/*!YYNMBCHARS*/

/*
** yyparse - return 0 if worked, 1 if syntax error not recovered from
*/
#if defined(__STDC__) || defined(__cplusplus)
int yyparse(void)
#else
int yyparse()
#endif
{
	register YYSTYPE *yypvt;	/* top of value stack for $vars */

#if defined(__cplusplus) || defined(lint)
/*
	hacks to please C++ and lint - goto's inside switch should never be
	executed; yypvt is set to 0 to avoid "used before set" warning.
*/
	static int __yaccpar_lint_hack__ = 0;
	switch (__yaccpar_lint_hack__)
	{
		case 1: goto yyerrlab;
		case 2: goto yynewstate;
	}
	yypvt = 0;
#endif

	/*
	** Initialize externals - yyparse may be called more than once
	*/
	yypv = &yyv[-1];
	yyps = &yys[-1];
	yystate = 0;
	yytmp = 0;
	yynerrs = 0;
	yyerrflag = 0;
	yychar = -1;

#if YYMAXDEPTH <= 0
	if (yymaxdepth <= 0)
	{
		if ((yymaxdepth = YYEXPAND(0)) <= 0)
		{
			yyerror("yacc initialization error");
			YYABORT;
		}
	}
#endif

	{
		register YYSTYPE *yy_pv;	/* top of value stack */
		register int *yy_ps;		/* top of state stack */
		register int yy_state;		/* current state */
		register int  yy_n;		/* internal state number info */
	goto yystack;	/* moved from 6 lines above to here to please C++ */

		/*
		** get globals into registers.
		** branch to here only if YYBACKUP was called.
		*/
	yynewstate:
		yy_pv = yypv;
		yy_ps = yyps;
		yy_state = yystate;
		goto yy_newstate;

		/*
		** get globals into registers.
		** either we just started, or we just finished a reduction
		*/
	yystack:
		yy_pv = yypv;
		yy_ps = yyps;
		yy_state = yystate;

		/*
		** top of for (;;) loop while no reductions done
		*/
	yy_stack:
		/*
		** put a state and value onto the stacks
		*/
#if YYDEBUG
		/*
		** if debugging, look up token value in list of value vs.
		** name pairs.  0 and negative (-1) are special values.
		** Note: linear search is used since time is not a real
		** consideration while debugging.
		*/
		if ( yydebug )
		{
			register int yy_i;

			printf( "State %d, token ", yy_state );
			if ( yychar == 0 )
				printf( "end-of-file\n" );
			else if ( yychar < 0 )
				printf( "-none-\n" );
			else
			{
				for ( yy_i = 0; yytoks[yy_i].t_val >= 0;
					yy_i++ )
				{
					if ( yytoks[yy_i].t_val == yychar )
						break;
				}
				printf( "%s\n", yytoks[yy_i].t_name );
			}
		}
#endif /* YYDEBUG */
		if ( ++yy_ps >= &yys[ yymaxdepth ] )	/* room on stack? */
		{
			/*
			** reallocate and recover.  Note that pointers
			** have to be reset, or bad things will happen
			*/
			int yyps_index = (yy_ps - yys);
			int yypv_index = (yy_pv - yyv);
			int yypvt_index = (yypvt - yyv);
			int yynewmax;
#ifdef YYEXPAND
			yynewmax = YYEXPAND(yymaxdepth);
#else
			yynewmax = 2 * yymaxdepth;	/* double table size */
			if (yymaxdepth == YYMAXDEPTH)	/* first time growth */
			{
				char *newyys = (char *)YYNEW(int);
				char *newyyv = (char *)YYNEW(YYSTYPE);
				if (newyys != 0 && newyyv != 0)
				{
					yys = YYCOPY(newyys, yys, int);
					yyv = YYCOPY(newyyv, yyv, YYSTYPE);
				}
				else
					yynewmax = 0;	/* failed */
			}
			else				/* not first time */
			{
				yys = YYENLARGE(yys, int);
				yyv = YYENLARGE(yyv, YYSTYPE);
				if (yys == 0 || yyv == 0)
					yynewmax = 0;	/* failed */
			}
#endif
			if (yynewmax <= yymaxdepth)	/* tables not expanded */
			{
				yyerror( "yacc stack overflow" );
				YYABORT;
			}
			yymaxdepth = yynewmax;

			yy_ps = yys + yyps_index;
			yy_pv = yyv + yypv_index;
			yypvt = yyv + yypvt_index;
		}
		*yy_ps = yy_state;
		*++yy_pv = yyval;

		/*
		** we have a new state - find out what to do
		*/
	yy_newstate:
		if ( ( yy_n = yypact[ yy_state ] ) <= YYFLAG )
			goto yydefault;		/* simple state */
#if YYDEBUG
		/*
		** if debugging, need to mark whether new token grabbed
		*/
		yytmp = yychar < 0;
#endif
		if ( ( yychar < 0 ) && ( ( yychar = YYLEX() ) < 0 ) )
			yychar = 0;		/* reached EOF */
#if YYDEBUG
		if ( yydebug && yytmp )
		{
			register int yy_i;

			printf( "Received token " );
			if ( yychar == 0 )
				printf( "end-of-file\n" );
			else if ( yychar < 0 )
				printf( "-none-\n" );
			else
			{
				for ( yy_i = 0; yytoks[yy_i].t_val >= 0;
					yy_i++ )
				{
					if ( yytoks[yy_i].t_val == yychar )
						break;
				}
				printf( "%s\n", yytoks[yy_i].t_name );
			}
		}
#endif /* YYDEBUG */
		if ( ( ( yy_n += yychar ) < 0 ) || ( yy_n >= YYLAST ) )
			goto yydefault;
		if ( yychk[ yy_n = yyact[ yy_n ] ] == yychar )	/*valid shift*/
		{
			yychar = -1;
			yyval = yylval;
			yy_state = yy_n;
			if ( yyerrflag > 0 )
				yyerrflag--;
			goto yy_stack;
		}

	yydefault:
		if ( ( yy_n = yydef[ yy_state ] ) == -2 )
		{
#if YYDEBUG
			yytmp = yychar < 0;
#endif
			if ( ( yychar < 0 ) && ( ( yychar = YYLEX() ) < 0 ) )
				yychar = 0;		/* reached EOF */
#if YYDEBUG
			if ( yydebug && yytmp )
			{
				register int yy_i;

				printf( "Received token " );
				if ( yychar == 0 )
					printf( "end-of-file\n" );
				else if ( yychar < 0 )
					printf( "-none-\n" );
				else
				{
					for ( yy_i = 0;
						yytoks[yy_i].t_val >= 0;
						yy_i++ )
					{
						if ( yytoks[yy_i].t_val
							== yychar )
						{
							break;
						}
					}
					printf( "%s\n", yytoks[yy_i].t_name );
				}
			}
#endif /* YYDEBUG */
			/*
			** look through exception table
			*/
			{
				register int *yyxi = yyexca;

				while ( ( *yyxi != -1 ) ||
					( yyxi[1] != yy_state ) )
				{
					yyxi += 2;
				}
				while ( ( *(yyxi += 2) >= 0 ) &&
					( *yyxi != yychar ) )
					;
				if ( ( yy_n = yyxi[1] ) < 0 )
					YYACCEPT;
			}
		}

		/*
		** check for syntax error
		*/
		if ( yy_n == 0 )	/* have an error */
		{
			/* no worry about speed here! */
			switch ( yyerrflag )
			{
			case 0:		/* new error */
				yyerror( "syntax error" );
				goto skip_init;
			yyerrlab:
				/*
				** get globals into registers.
				** we have a user generated syntax type error
				*/
				yy_pv = yypv;
				yy_ps = yyps;
				yy_state = yystate;
			skip_init:
				yynerrs++;
				/* FALLTHRU */
			case 1:
			case 2:		/* incompletely recovered error */
					/* try again... */
				yyerrflag = 3;
				/*
				** find state where "error" is a legal
				** shift action
				*/
				while ( yy_ps >= yys )
				{
					yy_n = yypact[ *yy_ps ] + YYERRCODE;
					if ( yy_n >= 0 && yy_n < YYLAST &&
						yychk[yyact[yy_n]] == YYERRCODE)					{
						/*
						** simulate shift of "error"
						*/
						yy_state = yyact[ yy_n ];
						goto yy_stack;
					}
					/*
					** current state has no shift on
					** "error", pop stack
					*/
#if YYDEBUG
#	define _POP_ "Error recovery pops state %d, uncovers state %d\n"
					if ( yydebug )
						printf( _POP_, *yy_ps,
							yy_ps[-1] );
#	undef _POP_
#endif
					yy_ps--;
					yy_pv--;
				}
				/*
				** there is no state on stack with "error" as
				** a valid shift.  give up.
				*/
				YYABORT;
			case 3:		/* no shift yet; eat a token */
#if YYDEBUG
				/*
				** if debugging, look up token in list of
				** pairs.  0 and negative shouldn't occur,
				** but since timing doesn't matter when
				** debugging, it doesn't hurt to leave the
				** tests here.
				*/
				if ( yydebug )
				{
					register int yy_i;

					printf( "Error recovery discards " );
					if ( yychar == 0 )
						printf( "token end-of-file\n" );
					else if ( yychar < 0 )
						printf( "token -none-\n" );
					else
					{
						for ( yy_i = 0;
							yytoks[yy_i].t_val >= 0;
							yy_i++ )
						{
							if ( yytoks[yy_i].t_val
								== yychar )
							{
								break;
							}
						}
						printf( "token %s\n",
							yytoks[yy_i].t_name );
					}
				}
#endif /* YYDEBUG */
				if ( yychar == 0 )	/* reached EOF. quit */
					YYABORT;
				yychar = -1;
				goto yy_newstate;
			}
		}/* end if ( yy_n == 0 ) */
		/*
		** reduction by production yy_n
		** put stack tops, etc. so things right after switch
		*/
#if YYDEBUG
		/*
		** if debugging, print the string that is the user's
		** specification of the reduction which is just about
		** to be done.
		*/
		if ( yydebug )
			printf( "Reduce by (%d) \"%s\"\n",
				yy_n, yyreds[ yy_n ] );
#endif
		yytmp = yy_n;			/* value to switch over */
		yypvt = yy_pv;			/* $vars top of value stack */
		/*
		** Look in goto table for next state
		** Sorry about using yy_state here as temporary
		** register variable, but why not, if it works...
		** If yyr2[ yy_n ] doesn't have the low order bit
		** set, then there is no action to be done for
		** this reduction.  So, no saving & unsaving of
		** registers done.  The only difference between the
		** code just after the if and the body of the if is
		** the goto yy_stack in the body.  This way the test
		** can be made before the choice of what to do is needed.
		*/
		{
			/* length of production doubled with extra bit */
			register int yy_len = yyr2[ yy_n ];

			if ( !( yy_len & 01 ) )
			{
				yy_len >>= 1;
				yyval = ( yy_pv -= yy_len )[1];	/* $$ = $1 */
				yy_state = yypgo[ yy_n = yyr1[ yy_n ] ] +
					*( yy_ps -= yy_len ) + 1;
				if ( yy_state >= YYLAST ||
					yychk[ yy_state =
					yyact[ yy_state ] ] != -yy_n )
				{
					yy_state = yyact[ yypgo[ yy_n ] ];
				}
				goto yy_stack;
			}
			yy_len >>= 1;
			yyval = ( yy_pv -= yy_len )[1];	/* $$ = $1 */
			yy_state = yypgo[ yy_n = yyr1[ yy_n ] ] +
				*( yy_ps -= yy_len ) + 1;
			if ( yy_state >= YYLAST ||
				yychk[ yy_state = yyact[ yy_state ] ] != -yy_n )
			{
				yy_state = yyact[ yypgo[ yy_n ] ];
			}
		}
					/* save until reenter driver code */
		yystate = yy_state;
		yyps = yy_ps;
		yypv = yy_pv;
	}
	/*
	** code supplied by user is placed in this switch
	*/
	switch( yytmp )
	{
		
case 1:
# line 61 "parse.y"
{ ADD_OP(OP_RETURN_NO_VAL); return 0; } break;
case 2:
# line 62 "parse.y"
{ ADD_OP(OP_RETURN_NO_VAL); return 0; } break;
case 3:
# line 63 "parse.y"
{ ADD_OP(OP_RETURN_NO_VAL); return 0; } break;
case 4:
# line 64 "parse.y"
{ return 1; } break;
case 10:
# line 73 "parse.y"
{ SET_BR_OFF((Inst *)yypvt[-3].inst, GetPC()); } break;
case 11:
# line 75 "parse.y"
{ SET_BR_OFF(yypvt[-6].inst, (yypvt[-2].inst+1)); SET_BR_OFF(yypvt[-2].inst, GetPC()); } break;
case 12:
# line 76 "parse.y"
{ ADD_OP(OP_BRANCH); ADD_BR_OFF(yypvt[-5].inst);
    	    	SET_BR_OFF(yypvt[-3].inst, GetPC()); FillLoopAddrs(GetPC(), yypvt[-5].inst); } break;
case 13:
# line 79 "parse.y"
{ FillLoopAddrs(GetPC()+2+(yypvt[-3].inst-(yypvt[-5].inst+1)), GetPC());
    	    	  SwapCode(yypvt[-5].inst+1, yypvt[-3].inst, GetPC());
    	    	  ADD_OP(OP_BRANCH); ADD_BR_OFF(yypvt[-7].inst); SET_BR_OFF(yypvt[-5].inst, GetPC()); } break;
case 14:
# line 83 "parse.y"
{ ADD_OP(OP_BRANCH); ADD_BR_OFF(0); AddBreakAddr(GetPC()-1); } break;
case 15:
# line 85 "parse.y"
{ ADD_OP(OP_BRANCH); ADD_BR_OFF(0); AddContinueAddr(GetPC()-1); } break;
case 16:
# line 86 "parse.y"
{ ADD_OP(OP_RETURN); } break;
case 17:
# line 87 "parse.y"
{ ADD_OP(OP_RETURN_NO_VAL); } break;
case 18:
# line 89 "parse.y"
{ ADD_OP(OP_ASSIGN); ADD_SYM(yypvt[-2].sym); } break;
case 19:
# line 90 "parse.y"
{ ADD_OP(OP_ADD); ADD_OP(OP_ASSIGN); ADD_SYM(yypvt[-2].sym); } break;
case 20:
# line 91 "parse.y"
{ ADD_OP(OP_SUB); ADD_OP(OP_ASSIGN); ADD_SYM(yypvt[-2].sym); } break;
case 21:
# line 92 "parse.y"
{ ADD_OP(OP_MUL); ADD_OP(OP_ASSIGN); ADD_SYM(yypvt[-2].sym); } break;
case 22:
# line 93 "parse.y"
{ ADD_OP(OP_DIV); ADD_OP(OP_ASSIGN); ADD_SYM(yypvt[-2].sym); } break;
case 23:
# line 94 "parse.y"
{ ADD_OP(OP_MOD); ADD_OP(OP_ASSIGN); ADD_SYM(yypvt[-2].sym); } break;
case 24:
# line 95 "parse.y"
{ ADD_OP(OP_BIT_AND); ADD_OP(OP_ASSIGN);
    	    	ADD_SYM(yypvt[-2].sym); } break;
case 25:
# line 97 "parse.y"
{ ADD_OP(OP_BIT_OR); ADD_OP(OP_ASSIGN);
    	    	ADD_SYM(yypvt[-2].sym); } break;
case 26:
# line 99 "parse.y"
{ ADD_OP(OP_SUBR_CALL);
	    	ADD_SYM(PromoteToGlobal(yypvt[-3].sym)); ADD_IMMED((void *)yypvt[-1].nArgs); } break;
case 27:
# line 101 "parse.y"
{ ADD_OP(OP_PUSH_SYM); ADD_SYM(yypvt[-0].sym); ADD_OP(OP_INCR);
    	    	ADD_OP(OP_ASSIGN); ADD_SYM(yypvt[-0].sym); } break;
case 28:
# line 103 "parse.y"
{ ADD_OP(OP_PUSH_SYM); ADD_SYM(yypvt[-1].sym); ADD_OP(OP_INCR);
		ADD_OP(OP_ASSIGN); ADD_SYM(yypvt[-1].sym); } break;
case 29:
# line 105 "parse.y"
{ ADD_OP(OP_PUSH_SYM); ADD_SYM(yypvt[-0].sym); ADD_OP(OP_DECR);
	    	ADD_OP(OP_ASSIGN); ADD_SYM(yypvt[-0].sym); } break;
case 30:
# line 107 "parse.y"
{ ADD_OP(OP_PUSH_SYM); ADD_SYM(yypvt[-1].sym); ADD_OP(OP_DECR);
		ADD_OP(OP_ASSIGN); ADD_SYM(yypvt[-1].sym); } break;
case 31:
# line 110 "parse.y"
{ yyval.sym = yypvt[-0].sym; ADD_OP(OP_PUSH_SYM); ADD_SYM(yypvt[-0].sym); } break;
case 32:
# line 112 "parse.y"
{ yyval.inst = GetPC(); } break;
case 33:
# line 113 "parse.y"
{ yyval.inst = GetPC(); } break;
case 34:
# line 114 "parse.y"
{ yyval.inst = GetPC(); } break;
case 35:
# line 116 "parse.y"
{ yyval.nArgs = 0;} break;
case 36:
# line 117 "parse.y"
{ yyval.nArgs = 1; } break;
case 37:
# line 118 "parse.y"
{ yyval.nArgs = yypvt[-2].nArgs + 1; } break;
case 39:
# line 121 "parse.y"
{ ADD_OP(OP_CONCAT); } break;
case 40:
# line 123 "parse.y"
{ ADD_OP(OP_PUSH_SYM); ADD_SYM(yypvt[-0].sym); } break;
case 41:
# line 124 "parse.y"
{ ADD_OP(OP_PUSH_SYM); ADD_SYM(yypvt[-0].sym); } break;
case 42:
# line 125 "parse.y"
{ ADD_OP(OP_PUSH_SYM); ADD_SYM(yypvt[-0].sym); } break;
case 43:
# line 126 "parse.y"
{ ADD_OP(OP_SUBR_CALL);
	    	ADD_SYM(PromoteToGlobal(yypvt[-3].sym)); ADD_IMMED((void *)yypvt[-1].nArgs);
		ADD_OP(OP_FETCH_RET_VAL);} break;
case 45:
# line 130 "parse.y"
{ ADD_OP(OP_ADD); } break;
case 46:
# line 131 "parse.y"
{ ADD_OP(OP_SUB); } break;
case 47:
# line 132 "parse.y"
{ ADD_OP(OP_MUL); } break;
case 48:
# line 133 "parse.y"
{ ADD_OP(OP_DIV); } break;
case 49:
# line 134 "parse.y"
{ ADD_OP(OP_MOD); } break;
case 50:
# line 135 "parse.y"
{ ADD_OP(OP_POWER); } break;
case 51:
# line 136 "parse.y"
{ ADD_OP(OP_NEGATE); } break;
case 52:
# line 137 "parse.y"
{ ADD_OP(OP_GT); } break;
case 53:
# line 138 "parse.y"
{ ADD_OP(OP_GE); } break;
case 54:
# line 139 "parse.y"
{ ADD_OP(OP_LT); } break;
case 55:
# line 140 "parse.y"
{ ADD_OP(OP_LE); } break;
case 56:
# line 141 "parse.y"
{ ADD_OP(OP_EQ); } break;
case 57:
# line 142 "parse.y"
{ ADD_OP(OP_NE); } break;
case 58:
# line 143 "parse.y"
{ ADD_OP(OP_BIT_AND); } break;
case 59:
# line 144 "parse.y"
{ ADD_OP(OP_BIT_OR); } break;
case 60:
# line 145 "parse.y"
{ ADD_OP(OP_AND); SET_BR_OFF(yypvt[-1].inst, GetPC()); } break;
case 61:
# line 146 "parse.y"
{ ADD_OP(OP_OR); SET_BR_OFF(yypvt[-1].inst, GetPC()); } break;
case 62:
# line 147 "parse.y"
{ ADD_OP(OP_NOT); } break;
case 63:
# line 148 "parse.y"
{ ADD_OP(OP_PUSH_SYM); ADD_SYM(yypvt[-0].sym); ADD_OP(OP_INCR);
    	    	ADD_OP(OP_DUP); ADD_OP(OP_ASSIGN); ADD_SYM(yypvt[-0].sym); } break;
case 64:
# line 150 "parse.y"
{ ADD_OP(OP_PUSH_SYM); ADD_SYM(yypvt[-1].sym); ADD_OP(OP_DUP);
	    	ADD_OP(OP_INCR); ADD_OP(OP_ASSIGN); ADD_SYM(yypvt[-1].sym); } break;
case 65:
# line 152 "parse.y"
{ ADD_OP(OP_PUSH_SYM); ADD_SYM(yypvt[-0].sym); ADD_OP(OP_DECR);
	    	ADD_OP(OP_DUP); ADD_OP(OP_ASSIGN); ADD_SYM(yypvt[-0].sym); } break;
case 66:
# line 154 "parse.y"
{ ADD_OP(OP_PUSH_SYM); ADD_SYM(yypvt[-1].sym); ADD_OP(OP_DUP);
	    	ADD_OP(OP_DECR); ADD_OP(OP_ASSIGN); ADD_SYM(yypvt[-1].sym); } break;
case 67:
# line 157 "parse.y"
{ yyval.inst = GetPC(); StartLoopAddrList(); } break;
case 68:
# line 159 "parse.y"
{ StartLoopAddrList(); } break;
case 69:
# line 161 "parse.y"
{ ADD_OP(OP_BRANCH); yyval.inst = GetPC(); ADD_BR_OFF(0); } break;
case 70:
# line 163 "parse.y"
{ ADD_OP(OP_BRANCH_NEVER); yyval.inst = GetPC(); ADD_BR_OFF(0); } break;
case 71:
# line 164 "parse.y"
{ ADD_OP(OP_BRANCH_FALSE); yyval.inst = GetPC(); ADD_BR_OFF(0); } break;
case 72:
# line 166 "parse.y"
{ ADD_OP(OP_DUP); ADD_OP(OP_BRANCH_FALSE); yyval.inst = GetPC();
    	    	ADD_BR_OFF(0); } break;
case 73:
# line 169 "parse.y"
{ ADD_OP(OP_DUP); ADD_OP(OP_BRANCH_TRUE); yyval.inst = GetPC();
    	    	ADD_BR_OFF(0); } break;
# line	532 "/usr/ccs/bin/yaccpar"
	}
	goto yystack;		/* reset registers in driver code */
}

